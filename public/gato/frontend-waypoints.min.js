(self["webpackChunkbingo"] = self["webpackChunkbingo"] || []).push([["frontend-waypoints.min"],{

/***/ "./assets/frontend/js/waypoints.min.js":
/*!*********************************************!*\
  !*** ./assets/frontend/js/waypoints.min.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");

__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");

__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

!function () {
  "use strict";

  function Waypoint(options) {
    if (!options) throw new Error("No options passed to Waypoint constructor");
    if (!options.element) throw new Error("No element option passed to Waypoint constructor");
    if (!options.handler) throw new Error("No handler option passed to Waypoint constructor");
    this.key = "waypoint-" + keyCounter, this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options), this.element = this.options.element, this.adapter = new Waypoint.Adapter(this.element), this.callback = options.handler, this.axis = this.options.horizontal ? "horizontal" : "vertical", this.enabled = this.options.enabled, this.triggerPoint = null, this.group = Waypoint.Group.findOrCreate({
      name: this.options.group,
      axis: this.axis
    }), this.context = Waypoint.Context.findOrCreateByElement(this.options.context), Waypoint.offsetAliases[this.options.offset] && (this.options.offset = Waypoint.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), allWaypoints[this.key] = this, keyCounter += 1;
  }

  var keyCounter = 0,
      allWaypoints = {};
  Waypoint.prototype.queueTrigger = function (direction) {
    this.group.queueTrigger(this, direction);
  }, Waypoint.prototype.trigger = function (args) {
    this.enabled && this.callback && this.callback.apply(this, args);
  }, Waypoint.prototype.destroy = function () {
    this.context.remove(this), this.group.remove(this), delete allWaypoints[this.key];
  }, Waypoint.prototype.disable = function () {
    return this.enabled = !1, this;
  }, Waypoint.prototype.enable = function () {
    return this.context.refresh(), this.enabled = !0, this;
  }, Waypoint.prototype.next = function () {
    return this.group.next(this);
  }, Waypoint.prototype.previous = function () {
    return this.group.previous(this);
  }, Waypoint.invokeAll = function (method) {
    var allWaypointsArray = [];

    for (var waypointKey in allWaypoints) {
      allWaypointsArray.push(allWaypoints[waypointKey]);
    }

    for (var i = 0, end = allWaypointsArray.length; i < end; i++) {
      allWaypointsArray[i][method]();
    }
  }, Waypoint.destroyAll = function () {
    Waypoint.invokeAll("destroy");
  }, Waypoint.disableAll = function () {
    Waypoint.invokeAll("disable");
  }, Waypoint.enableAll = function () {
    Waypoint.Context.refreshAll();

    for (var waypointKey in allWaypoints) {
      allWaypoints[waypointKey].enabled = !0;
    }

    return this;
  }, Waypoint.refreshAll = function () {
    Waypoint.Context.refreshAll();
  }, Waypoint.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  }, Waypoint.viewportWidth = function () {
    return document.documentElement.clientWidth;
  }, Waypoint.adapters = [], Waypoint.defaults = {
    context: window,
    continuous: !0,
    enabled: !0,
    group: "default",
    horizontal: !1,
    offset: 0
  }, Waypoint.offsetAliases = {
    "bottom-in-view": function bottomInView() {
      return this.context.innerHeight() - this.adapter.outerHeight();
    },
    "right-in-view": function rightInView() {
      return this.context.innerWidth() - this.adapter.outerWidth();
    }
  }, window.Waypoint = Waypoint;
}(), function () {
  "use strict";

  function requestAnimationFrameShim(callback) {
    window.setTimeout(callback, 1e3 / 60);
  }

  function Context(element) {
    this.element = element, this.Adapter = Waypoint.Adapter, this.adapter = new this.Adapter(element), this.key = "waypoint-context-" + keyCounter, this.didScroll = !1, this.didResize = !1, this.oldScroll = {
      x: this.adapter.scrollLeft(),
      y: this.adapter.scrollTop()
    }, this.waypoints = {
      vertical: {},
      horizontal: {}
    }, element.waypointContextKey = this.key, contexts[element.waypointContextKey] = this, keyCounter += 1, Waypoint.windowContext || (Waypoint.windowContext = !0, Waypoint.windowContext = new Context(window)), this.createThrottledScrollHandler(), this.createThrottledResizeHandler();
  }

  var keyCounter = 0,
      contexts = {},
      Waypoint = window.Waypoint,
      oldWindowLoad = window.onload;
  Context.prototype.add = function (waypoint) {
    var axis = waypoint.options.horizontal ? "horizontal" : "vertical";
    this.waypoints[axis][waypoint.key] = waypoint, this.refresh();
  }, Context.prototype.checkEmpty = function () {
    var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal),
        verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical),
        isWindow = this.element == this.element.window;
    horizontalEmpty && verticalEmpty && !isWindow && (this.adapter.off(".waypoints"), delete contexts[this.key]);
  }, Context.prototype.createThrottledResizeHandler = function () {
    function resizeHandler() {
      self.handleResize(), self.didResize = !1;
    }

    var self = this;
    this.adapter.on("resize.waypoints", function () {
      self.didResize || (self.didResize = !0, Waypoint.requestAnimationFrame(resizeHandler));
    });
  }, Context.prototype.createThrottledScrollHandler = function () {
    function scrollHandler() {
      self.handleScroll(), self.didScroll = !1;
    }

    var self = this;
    this.adapter.on("scroll.waypoints", function () {
      self.didScroll && !Waypoint.isTouch || (self.didScroll = !0, Waypoint.requestAnimationFrame(scrollHandler));
    });
  }, Context.prototype.handleResize = function () {
    Waypoint.Context.refreshAll();
  }, Context.prototype.handleScroll = function () {
    var triggeredGroups = {},
        axes = {
      horizontal: {
        newScroll: this.adapter.scrollLeft(),
        oldScroll: this.oldScroll.x,
        forward: "right",
        backward: "left"
      },
      vertical: {
        newScroll: this.adapter.scrollTop(),
        oldScroll: this.oldScroll.y,
        forward: "down",
        backward: "up"
      }
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey],
          isForward = axis.newScroll > axis.oldScroll,
          direction = isForward ? axis.forward : axis.backward;

      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];

        if (null !== waypoint.triggerPoint) {
          var wasBeforeTriggerPoint = axis.oldScroll < waypoint.triggerPoint,
              nowAfterTriggerPoint = axis.newScroll >= waypoint.triggerPoint,
              crossedForward = wasBeforeTriggerPoint && nowAfterTriggerPoint,
              crossedBackward = !wasBeforeTriggerPoint && !nowAfterTriggerPoint;
          (crossedForward || crossedBackward) && (waypoint.queueTrigger(direction), triggeredGroups[waypoint.group.id] = waypoint.group);
        }
      }
    }

    for (var groupKey in triggeredGroups) {
      triggeredGroups[groupKey].flushTriggers();
    }

    this.oldScroll = {
      x: axes.horizontal.newScroll,
      y: axes.vertical.newScroll
    };
  }, Context.prototype.innerHeight = function () {
    return this.element == this.element.window ? Waypoint.viewportHeight() : this.adapter.innerHeight();
  }, Context.prototype.remove = function (waypoint) {
    delete this.waypoints[waypoint.axis][waypoint.key], this.checkEmpty();
  }, Context.prototype.innerWidth = function () {
    return this.element == this.element.window ? Waypoint.viewportWidth() : this.adapter.innerWidth();
  }, Context.prototype.destroy = function () {
    var allWaypoints = [];

    for (var axis in this.waypoints) {
      for (var waypointKey in this.waypoints[axis]) {
        allWaypoints.push(this.waypoints[axis][waypointKey]);
      }
    }

    for (var i = 0, end = allWaypoints.length; i < end; i++) {
      allWaypoints[i].destroy();
    }
  }, Context.prototype.refresh = function () {
    var axes,
        isWindow = this.element == this.element.window,
        contextOffset = isWindow ? void 0 : this.adapter.offset(),
        triggeredGroups = {};
    this.handleScroll(), axes = {
      horizontal: {
        contextOffset: isWindow ? 0 : contextOffset.left,
        contextScroll: isWindow ? 0 : this.oldScroll.x,
        contextDimension: this.innerWidth(),
        oldScroll: this.oldScroll.x,
        forward: "right",
        backward: "left",
        offsetProp: "left"
      },
      vertical: {
        contextOffset: isWindow ? 0 : contextOffset.top,
        contextScroll: isWindow ? 0 : this.oldScroll.y,
        contextDimension: this.innerHeight(),
        oldScroll: this.oldScroll.y,
        forward: "down",
        backward: "up",
        offsetProp: "top"
      }
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];

      for (var waypointKey in this.waypoints[axisKey]) {
        var contextModifier,
            wasBeforeScroll,
            nowAfterScroll,
            triggeredBackward,
            triggeredForward,
            waypoint = this.waypoints[axisKey][waypointKey],
            adjustment = waypoint.options.offset,
            oldTriggerPoint = waypoint.triggerPoint,
            elementOffset = 0,
            freshWaypoint = null == oldTriggerPoint;
        waypoint.element !== waypoint.element.window && (elementOffset = waypoint.adapter.offset()[axis.offsetProp]), "function" == typeof adjustment ? adjustment = adjustment.apply(waypoint) : "string" == typeof adjustment && (adjustment = parseFloat(adjustment), waypoint.options.offset.indexOf("%") > -1 && (adjustment = Math.ceil(axis.contextDimension * adjustment / 100))), contextModifier = axis.contextScroll - axis.contextOffset, waypoint.triggerPoint = Math.floor(elementOffset + contextModifier - adjustment), wasBeforeScroll = oldTriggerPoint < axis.oldScroll, nowAfterScroll = waypoint.triggerPoint >= axis.oldScroll, triggeredBackward = wasBeforeScroll && nowAfterScroll, triggeredForward = !wasBeforeScroll && !nowAfterScroll, !freshWaypoint && triggeredBackward ? (waypoint.queueTrigger(axis.backward), triggeredGroups[waypoint.group.id] = waypoint.group) : !freshWaypoint && triggeredForward ? (waypoint.queueTrigger(axis.forward), triggeredGroups[waypoint.group.id] = waypoint.group) : freshWaypoint && axis.oldScroll >= waypoint.triggerPoint && (waypoint.queueTrigger(axis.forward), triggeredGroups[waypoint.group.id] = waypoint.group);
      }
    }

    return Waypoint.requestAnimationFrame(function () {
      for (var groupKey in triggeredGroups) {
        triggeredGroups[groupKey].flushTriggers();
      }
    }), this;
  }, Context.findOrCreateByElement = function (element) {
    return Context.findByElement(element) || new Context(element);
  }, Context.refreshAll = function () {
    for (var contextId in contexts) {
      contexts[contextId].refresh();
    }
  }, Context.findByElement = function (element) {
    return contexts[element.waypointContextKey];
  }, window.onload = function () {
    oldWindowLoad && oldWindowLoad(), Context.refreshAll();
  }, Waypoint.requestAnimationFrame = function (callback) {
    var requestFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || requestAnimationFrameShim;
    requestFn.call(window, callback);
  }, Waypoint.Context = Context;
}(), function () {
  "use strict";

  function byTriggerPoint(a, b) {
    return a.triggerPoint - b.triggerPoint;
  }

  function byReverseTriggerPoint(a, b) {
    return b.triggerPoint - a.triggerPoint;
  }

  function Group(options) {
    this.name = options.name, this.axis = options.axis, this.id = this.name + "-" + this.axis, this.waypoints = [], this.clearTriggerQueues(), groups[this.axis][this.name] = this;
  }

  var groups = {
    vertical: {},
    horizontal: {}
  },
      Waypoint = window.Waypoint;
  Group.prototype.add = function (waypoint) {
    this.waypoints.push(waypoint);
  }, Group.prototype.clearTriggerQueues = function () {
    this.triggerQueues = {
      up: [],
      down: [],
      left: [],
      right: []
    };
  }, Group.prototype.flushTriggers = function () {
    for (var direction in this.triggerQueues) {
      var waypoints = this.triggerQueues[direction],
          reverse = "up" === direction || "left" === direction;
      waypoints.sort(reverse ? byReverseTriggerPoint : byTriggerPoint);

      for (var i = 0, end = waypoints.length; i < end; i += 1) {
        var waypoint = waypoints[i];
        (waypoint.options.continuous || i === waypoints.length - 1) && waypoint.trigger([direction]);
      }
    }

    this.clearTriggerQueues();
  }, Group.prototype.next = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints),
        isLast = index === this.waypoints.length - 1;
    return isLast ? null : this.waypoints[index + 1];
  }, Group.prototype.previous = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    return index ? this.waypoints[index - 1] : null;
  }, Group.prototype.queueTrigger = function (waypoint, direction) {
    this.triggerQueues[direction].push(waypoint);
  }, Group.prototype.remove = function (waypoint) {
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    index > -1 && this.waypoints.splice(index, 1);
  }, Group.prototype.first = function () {
    return this.waypoints[0];
  }, Group.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  }, Group.findOrCreate = function (options) {
    return groups[options.axis][options.name] || new Group(options);
  }, Waypoint.Group = Group;
}(), function () {
  "use strict";

  function JQueryAdapter(element) {
    this.$element = $(element);
  }

  var $ = __webpack_provided_window_dot_jQuery,
      Waypoint = window.Waypoint;
  $.each(["innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop"], function (i, method) {
    JQueryAdapter.prototype[method] = function () {
      var args = Array.prototype.slice.call(arguments);
      return this.$element[method].apply(this.$element, args);
    };
  }), $.each(["extend", "inArray", "isEmptyObject"], function (i, method) {
    JQueryAdapter[method] = $[method];
  }), Waypoint.adapters.push({
    name: "jquery",
    Adapter: JQueryAdapter
  }), Waypoint.Adapter = JQueryAdapter;
}(), function () {
  "use strict";

  function createExtension(framework) {
    return function () {
      var waypoints = [],
          overrides = arguments[0];
      return framework.isFunction(arguments[0]) && (overrides = framework.extend({}, arguments[1]), overrides.handler = arguments[0]), this.each(function () {
        var options = framework.extend({}, overrides, {
          element: this
        });
        "string" == typeof options.context && (options.context = framework(this).closest(options.context)[0]), waypoints.push(new Waypoint(options));
      }), waypoints;
    };
  }

  var Waypoint = window.Waypoint;
  __webpack_provided_window_dot_jQuery && (__webpack_provided_window_dot_jQuery.fn.elementorWaypoint = createExtension(__webpack_provided_window_dot_jQuery)), window.Zepto && (window.Zepto.fn.elementorWaypoint = createExtension(window.Zepto));
}();

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ "use strict";
/******/ 
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_internals_export_js-node_modules_core-js_internals_well-known-sy-07cc72","vendors-node_modules_jquery_dist_jquery_js","vendors-node_modules_core-js_modules_es_array_index-of_js-node_modules_core-js_modules_es_arr-77a3b4"], () => (__webpack_exec__("./assets/frontend/js/waypoints.min.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,